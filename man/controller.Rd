% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/controller.R
\name{controller}
\alias{controller}
\title{Defining a Controller}
\usage{
controller(trial, listener)
}
\arguments{
\item{trial}{a trial object returned from \code{trial()}.}

\item{listener}{a listener object returned from \code{listener()}.}
}
\value{
a controller object
}
\description{
Define a controller of a trial. \code{TSLite} uses a controller to
coordinate a trial and a listener who monitors the trial. It can control
the number of replicates of simulation to be run, and record simulation
results for summary.
}
\examples{
## a minimum, meaningful, and executable example,
## where a randomized trial with two arms is simulated and analyzed.
library(TrialSimulator)
library(survival)

control <- arm(name = 'control arm')
active <- arm(name = 'active arm')

pfs_in_control <-
  endpoint(name = 'PFS', type = 'tte', generator = rexp, rate = log(2) / 5)
addEndpoints(control, pfs_in_control)

pfs_in_active <-
  endpoint(name = 'PFS', type = 'tte', generator = rexp, rate = log(2) / 6)
addEndpoints(active, pfs_in_active)

accrual_rate <- data.frame(end_time = c(10, Inf), piecewise_rate = c(30, 50))
trial <- trial(name = 'trial',
               n_patients = 1000,
               duration = 40,
               enroller = StaggeredRecruiter,
               accrual_rate = accrual_rate,
               dropout = rweibull, shape = 2, scale = 38)

addArms(trial, sample_ratio = c(1, 1), control, active)

action_at_final <- function(trial, milestone_name){
  locked_data <- trial$get_locked_data(milestone_name)
  TrialSimulator::fitLogrank(Surv(PFS, PFS_event) ~ arm,
                             placebo = 'control arm',
                             data = locked_data,
                             alternative = 'less')
  invisible(NULL)
}

final <- milestone(name = 'final analysis',
                   action = action_at_final,
                   when = calendarTime(time = 40))

listener <- listener()
addMilestones(listener, final)

controller <- controller(trial, listener)
controller$run(n = 1)

}
